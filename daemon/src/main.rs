use std::{
    net::{IpAddr, Ipv4Addr},
    time::Duration,
};

use clap::Parser;
use futures::{future, prelude::*};
use log::info;
use tarpc::{
    self,
    server::{incoming::Incoming, BaseChannel, Channel},
    tokio_serde::formats::Bincode,
};
use tokio::{self};

use crate::definition::Rpc;
use crate::logger::init_logger;
use crate::rpc_server::controller::RpcServer;

mod definition;
mod logger;
mod rpc_server;

#[derive(Parser)]
struct Flags {
    /// Sets the port number to listen on.
    #[clap(long, default_value = "6600")]
    port: u16,
}

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    init_logger(log::LevelFilter::Info);

    let flags = Flags::parse();

    let server_addr = (IpAddr::V4(Ipv4Addr::LOCALHOST), flags.port);

    // TODO: Implement daemon
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Bincode::default).await?;
    info!("Listening on {}", listener.local_addr());
    // listener.config_mut()...
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = RpcServer(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve()).for_each(spawn)
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    todo!();
}
