//----------------------------------------------------------------------------------------- std lib
use std::net::{IpAddr, Ipv4Addr};
//--------------------------------------------------------------------------------- other libraries
use futures::{future, prelude::*};
use log::info;
use tarpc::{
    self,
    server::{incoming::Incoming, BaseChannel, Channel},
    tokio_serde::formats::Bincode,
};
use tokio::{self};
//-------------------------------------------------------------------------------- MECOMP libraries
use mecomp_core::{logger::init_logger, rpc::MusicPlayer as _};
use mecomp_daemon::{config::DaemonSettings, controller::MusicPlayerServer};
use mecomp_storage::db::init_database;

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    init_logger(log::LevelFilter::Info);
    let settings = DaemonSettings::init()?;
    init_database(settings.db_path).await?;

    let server_addr = (IpAddr::V4(Ipv4Addr::LOCALHOST), settings.rpc_port);

    // TODO: Implement daemon
    let listener = tarpc::serde_transport::tcp::listen(&server_addr, Bincode::default).await?;
    info!("Listening on {}", listener.local_addr());
    // listener.config_mut()...
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated MusicPlayer trait.
        .map(|channel| {
            let server = MusicPlayerServer(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve()).for_each(spawn)
        })
        // Max 1 channels.
        // this means that we will only process one request at a time
        .buffer_unordered(1)
        .for_each(|()| async {})
        .await;

    todo!();
}
