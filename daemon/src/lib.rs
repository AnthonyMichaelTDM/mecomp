//----------------------------------------------------------------------------------------- std lib
use std::net::{IpAddr, Ipv4Addr};
//--------------------------------------------------------------------------------- other libraries
use anyhow;
use futures::{future, prelude::*};
use log::info;
use tarpc::{
    self, client,
    server::{incoming::Incoming as _, BaseChannel, Channel as _},
    tokio_serde::formats::Bincode,
};
use tokio;
//-------------------------------------------------------------------------------- MECOMP libraries
use mecomp_core::{
    logger::init_logger,
    rpc::{MusicPlayer as _, MusicPlayerClient},
};
use mecomp_storage::db::init_database;

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

pub mod config;
pub mod controller;
pub mod errors;
pub mod services;

use config::DaemonSettings;
use controller::MusicPlayerServer;

/// Run the daemon
///
/// also initializes the logger, database, and other necessary components.
///
/// # Arguments
///
/// * `settings` - The settings to use.
pub async fn start_daemon(
    log_level: log::LevelFilter,
    settings: &DaemonSettings,
) -> anyhow::Result<()> {
    init_logger(log_level);
    init_database(settings.db_path.clone()).await?;

    let server_addr = (IpAddr::V4(Ipv4Addr::LOCALHOST), settings.rpc_port);

    // TODO: Implement daemon
    let listener = tarpc::serde_transport::tcp::listen(&server_addr, Bincode::default).await?;
    info!("Listening on {}", listener.local_addr());
    // listener.config_mut()...
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated MusicPlayer trait.
        .map(|channel| {
            let server = MusicPlayerServer(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve()).for_each(spawn)
        })
        // Max 1 channels.
        // this means that we will only process one request at a time
        .buffer_unordered(1)
        .for_each(|()| async {})
        .await;

    todo!();
}

pub async fn init_client(rpc_port: u16) -> anyhow::Result<MusicPlayerClient> {
    let server_addr = (IpAddr::V4(Ipv4Addr::LOCALHOST), rpc_port);

    let mut transport = tarpc::serde_transport::tcp::connect(server_addr, Bincode::default);
    transport.config_mut().max_frame_length(usize::MAX);

    // MusicPlayerClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    Ok(MusicPlayerClient::new(client::Config::default(), transport.await?).spawn())
}
