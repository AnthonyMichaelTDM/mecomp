[package]
name = "mecomp-core"
description = "Core library for the mecomp project, includes the core schemas, shared utils, and other such things."
version.workspace = true
edition.workspace = true
authors.workspace = true
repository.workspace = true
keywords.workspace = true
categories.workspace = true
readme.workspace = true
license.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[bench]]
name = "udp"
harness = false

[features]
default = ["audio", "rpc"]
rpc = ["dep:tarpc", "dep:ciborium", "dep:tokio", "dep:object-pool"]
otel_tracing = [
    "dep:tracing-opentelemetry",
    "dep:opentelemetry",
    "dep:opentelemetry_sdk",
    "dep:opentelemetry-semantic-conventions",
    "dep:opentelemetry-otlp",
]
audio = ["dep:rodio", "dep:tokio", "dep:rand"]
flame = ["tracing-flame"]
verbose_tracing = []
test_utils = []

# for testing purposes, prevents actual playback of audio which is useful in CI environments where audio playback is not possible
mock_playback = []

[dependencies]
# shared dependencies
ciborium = { workspace = true, optional = true }
directories = { workspace = true }
env_logger = { workspace = true }
log = { workspace = true }
once_cell = { workspace = true }
rand = { workspace = true, optional = true }
rodio = { workspace = true, optional = true }
serde = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true, optional = true }
tarpc = { workspace = true, optional = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
tracing-opentelemetry = { workspace = true, optional = true }
tracing-flame = { workspace = true, optional = true }
object-pool = { workspace = true, optional = true }
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
opentelemetry-semantic-conventions = { workspace = true, optional = true }

# MECOMP dependencies
mecomp-storage = { workspace = true, features = ["serde"] }
one-or-many = { workspace = true }
mecomp-workspace-hack = { version = "0.1", path = "../mecomp-workspace-hack" }

[dev-dependencies]
# shared dev dependencies
criterion.workspace = true
anyhow = { workspace = true }
pretty_assertions = { workspace = true }
rstest = { workspace = true }
rstest_reuse = { workspace = true }
tempfile = { workspace = true }
lofty = { workspace = true }
mecomp-storage = { workspace = true, features = [
    "serde",
    "db",
    "analysis",
    "test_utils",
] }
surrealdb = { workspace = true }

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tarpaulin_include)'] }
